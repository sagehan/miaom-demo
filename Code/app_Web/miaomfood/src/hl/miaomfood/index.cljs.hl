(page "index.html"
      (:require
       [clojure.string  :as string]
       [datascript.core :as d :refer [q]]
       [datascript.transit :as dt]
       [cljsjs.hammer]
       [javelin.core :refer [cell] :refer-macros [cell= destroy-cell!]]
       [miaomfood.rpc :as rpc]))

(enable-console-print!)
(add-initfn! (rpc/fetch-raw-db))

;; Remote DB ============================================================
(def schema {:website/notices   {:db/cardinality :db.cardinality/many
                                 :db/valueType   :db.type/ref }
             :group/menus       {:db/cardinality :db.cardinality/many
                                 :db/valueType   :db.type/ref }
             :menu/categories   {:db/cardinality :db.cardinality/many
                                 :db/valueType   :db.type/ref }
             :category/cuisines {:db/cardinality :db.cardinality/many
                                 :db/valueType   :db.type/ref }
             :cuisine/id        {:db/unique      :db.unique/identity }
             :cuisine/species   {:db/cardinality :db.cardinality/many
                                 :db/isComponent true
                                 :db/valueType   :db.type/ref }} )
(def datoms  (cell= rpc/raw-db) )
(def db      (cell= (d/db-with (d/empty-db schema) datoms)))

;;===== query cells =======================
(defc= site-title (d/q '[:find ?t . :where [_ :website/title ?t]] db))

(defc= notices (d/q '[:find [?n ...]
                      :where
                      [_ :website/notices ?ns]
                      [?ns :notice/content ?n]]
                 db))

(defc= restaurant-meta (d/q '[:find (pull ?e [:restaurant/name
                                              :restaurant/phone
                                              :restaurant/address
                                              :restaurant/wechatID
                                              :restaurant/rest-day
                                              :restaurant/isClosed ]) .
                              :where [?e :restaurant/name]]
                         db))

(defc= menus (d/q '[:find [?mn ...]
                    :where [ _   :group/menus ?gm ]
                    [ ?gm :menu/name  ?mn ] ]
               db))

(defc= categories-of
  (fn  [menu]
    (d/q '[:find [?cn ...]
           :in $, ?mn
           :where
           [ ?e  :menu/name       ?mn ]
           [ ?e  :menu/categories ?mc ]
           [ ?mc :category/name   ?cn ] ]
      db, menu)))

(defc= cuisines-of
  (fn [category]
    (d/q '[:find [?cid ...]
           :in $, ?cn
           :where
           [ ?e  :category/name     ?cn  ]
           [ ?e  :category/cuisines ?cc  ]
           [ ?cc :cuisine/id        ?cid ] ]
      db, category)))

(defc= cuisine-details-of
  (fn [cuisine-id]
    (d/pull db ["*"] [:cuisine/id cuisine-id])))

;; Local DB ====================================================================

(def  schema__cart {:cuisine/id      {:db/unique      :db.unique/identity }
                    :cuisine/species {:db/cardinality :db.cardinality/many
                                      :db/valueType   :db.type/ref }} )
(def conn__cart (d/create-conn schema__cart) )

(def db__cart (cell (d/empty-db)) )

;;===== fresh DB on every transaction!
(d/listen! conn__cart :fresh #(reset! db__cart (:db-after %)))

;;===== persisting DB between page reloads!
(defn persist [db]
  (js/localStorage.setItem "miaomfood/DB" (dt/write-transit-str db)))

(d/listen! conn__cart :persistence
           (fn [tx-report] (when-let [db (:db-after tx-report)]
                             (js/setTimeout #(persist db) 0))))

;;===== restoring once persisted DB on page load
;;      Thanks Nikita Prokopov https://github.com/tonsky/
(when-let [stored (js/localStorage.getItem "miaomfood/DB")]
  (let [stored-db (dt/read-transit-str stored)]
    (when (= (:schema stored-db) schema__cart) ;; check for code update
      (d/reset-conn! conn__cart stored-db)
      (persist stored-db)
      true)))

;;===== Query  ===========================
(defn check-selected-spec
  "Check the special cuisine's cart status, return a vector of maps"
  [ db cuisines-id ]
  (let [eids
        (d/q '[:find [?cs ...]
               :in $ ?cid
               :where
               [ ?e  :cuisine/id      ?cid ]
               [ ?e  :cuisine/species ?cs  ]
               [ ?cs :spec/name       ?sn  ]
               [ ?cs :spec/quantity   ?sq  ]]
          db, cuisines-id) ]
    (d/pull-many db ["*"] eids)))

(defn spec-qty-tuple [db cid spec]
  (d/q '[:find [?e ?qty]
         :in $ ?cid ?spec
         :where
         [?c :cuisine/id      ?cid]
         [?c :cuisine/species ?e]
         [?e :spec/name       ?spec]
         [?e :spec/quantity   ?qty] ]
    db cid spec))

;;===== transaction! ======================
(defn inc-spec-tx [db cid cname spec]
  (let [cuisine (d/entity db [:cuisine/id cid])]
    (if (nil? cuisine)
      [{:db/id -1 :cuisine/id cid :cuisine/name cname :cuisine/species {:db/id -2}}
       {:db/id -2 :spec/name spec :spce/quantity 1}]
      (if-let [ [eid qty] (spec-qty-tuple db cid spec) ]
        [{:db/id eid :spec/quantity (inc qty)} ]
        [{:db/id [:cuisine/id cid]
          :cuisine/species {:db/id -1}}
         {:db/id -1 :spec/name spec :spec/quantity 1} ]))))

(defn dec-spec-tx [db cid cname spec]
  (let [cuisine (d/entity db [:cuisine/id cid])
        species (:cuisine/species cuisine)
        count   (count species)]
    (if (nil? species)
      true
      (if-let [ [eid qty] (spec-qty-tuple db cid spec) ]
        (cond
          (>  qty 1) [{:db/id eid :spec/quantity (dec qty)} ]
          (and (== qty 1) (== 1 count)) [[:db.fn/retractEntity eid ]
                                         [:db.fn/retractEntity [:cuisine/id cid]]]
          (== qty 1) [[:db.fn/retractEntity eid ]]
          :else      true)
        true))))

(defn inc-cuisine! [cid cname spec]
  (let [{:keys [db-before db-after]}
        (d/transact! conn__cart [[:db.fn/call inc-spec-tx cid cname spec]])]
    (do (print db-before)
        (print db-after)
        (print db__cart))))

(defn dec-cuisine! [cid cname spec]
  (d/transact! conn__cart [[:db.fn/call dec-spec-tx cid cname spec]]))

;; State cells =====================================================================
(defc folding-toggle true)
(defc adding-pool nil)

;;===== state transition functions ==========
(def folding!    #(swap! folding-toggle not))
(def ordering!   (fn [cid] (reset! adding-pool [cid])))
(def unOrdering! #(reset! adding-pool nil))

;; Auxiliary =======================================================================
(def indexed (partial map-indexed vector))

(def cycle-shift-vector-left!
  (fn [v] (swap! v #(into (into [] (rest %)) (vector (first %))))))

(def cycle-shift-vector-right!
  (fn [v] (swap! v #(into (vector (peek %)) (pop %)))))

;; Helper elements =================================================================
(defelem show-or-hide
  [{:keys [state]} children]
  (map (fn [child] (child :slide-toggle state)) children))

(defelem equal-ratio-wrap [{:keys [ratio] :or {:ratio "golden"} :as attr} body]
  (let [attr (dissoc attr :ratio)]
    ((div attr) {:class (str "wrp_ratio--" ratio)}
      (div :class "wrp--stretched"
        body))))

(defelem tag [{:keys [leadingText trailingText] :as attr} _]
  (let [ attr (dissoc attr :leadingText :trailingText) ]
    ((span :class "tag"
       (b
         :class "tag__leading"
         :text leadingText)
       (b
         :class  "tag__trailing"
         :text trailingText))
     attr)))

;; Component elements =================================================================
(defelem billboard [{:keys [greeting interval] :or {interval 3000} :as attr} ]
  (let [ note  (cell greeting)
         attr  (dissoc attr :interval :greeting) ]
    (with-let [elem (div attr (span :class "notice-board__notice" (cell= note )))]
      (with-init!
        (with-interval interval
          (when-let [hasValue (cell= (rand-nth notices))]
            (reset! note @hasValue)))))))

(defelem slideshow [{
                     :keys [ imgs interval default_img ]
                     :or   { interval 3000 default_img "img/logo.jpg" }
                     :as   attr
                     }]
  (let [ imgs   (cell= (->> (conj [] default_img (not-empty imgs))
                          (flatten)
                          (distinct)
                          (filterv #(not= nil %))))
         toggle (cell   [ [true] [false] [false] [false] ])
         attr   (dissoc attr :imgs :interval :default_img) ]
    (with-let [elem
               (equal-ratio-wrap
                attr
                (div (loop-tpl
                      :bindings [ [[t] im] (cell= (map vector toggle imgs)) ]
                      (img
                        :class  "slideshow__img wrp--centering"
                        :src    im
                        :toggle t)))
                (div :class "slideshow__pagination"
                  (loop-tpl
                   :bindings [[t] toggle]
                   (span
                     :class (cell= {:pagination__bullet true
                                    :pagination__bullet--active t})))))]
      (with-init!
        (with-interval interval
          (swap! toggle #(into (vector (last %)) (butlast %)))))
      (with-dom elem
        (let [ hm-slide (js/Hammer. (.getElementById js/document "slideshow")) ]
          (.on hm-slide "swipeleft"  #(cycle-shift-vector-left! toggle))
          (.on hm-slide "swiperight" #(cycle-shift-vector-right! toggle)))))))

(defelem navbar []
  (nav :class "nav"))

(defelem checkout-button [ {:keys [label btn__img] :or {label "提交订单"} :as attr} ]
  (a :class "btn-order"
    (span :class "btn-order__label" :text label)
    (img  :src btn__img)))

(defelem checkout-panel []
  (div :class "checkout-page"))

(defelem addition-button [{:keys [cid] :as attr} _]
  (let [attr (dissoc attr :cid)]
    (div attr
      :click #(ordering! cid))))

(defelem addition-panel [{:keys [cid]} _]
  (let [c         (cell= (cuisine-details-of cid))
        species   (cell= (:cuisine/species c))
        cname     (cell= (:cuisine/name    c))
        s_names   (cell= (map (comp name :spec/name) species))
        selected  (cell= (check-selected-spec db__cart cid))
        visible   (cell false) ]
    (with-let
      [elem
       (div :class (cell= {:modal     true
                           :isVisible visible})
         (equal-ratio-wrap
          :ratio "golden"
          :class (cell=  {:addition-panel true
                          :isVisible      visible})
          (div :class "addition-panel__title-wrap"
            (h2  :class "addition-panel__title" cname))
          (div :class "addition-panel__row-wrap"
            (loop-tpl
             :bindings [spec s_names]
             (let [quantity
                   (cell= (or (->> selected
                                   (filterv #(= spec ((comp name :spec/name) %)) )
                                   (first)
                                   (:spec/quantity))
                              0))
                   added? (cell= (> quantity 0)) ]
               (div
                 :class   "addition-panel__row"
                 (tag
                  :class        (cell= {:addition-tag true
                                        :tag--isEmpty (not added?)})
                  :leadingText  spec
                  :trailingText (cell= (if-not (zero? quantity)
                                         (str "×" quantity)
                                         "")))
                 (div
                   :class "addition-panel__btn-add"
                   :click #(inc-cuisine! cid @cname @spec))
                 (div
                   :class "addition-panel__btn-retract"
                   :click #(dec-cuisine! cid @cname @spec)
                   :css   (cell= {:visibility (when-not added? "hidden")})
                   ))))))
         (div
           :class (cell= {:miao-button true
                          :isVisible visible})
           :click #(do (reset! visible false)
                       (with-timeout 150 (unOrdering!)))))]
      (with-init!
        (with-interval 1000
          (if-not (instance? js/Element (.get (js/jQuery ".modal") 0))
            (.css (js/jQuery "body") "overflow" "visible"))))
      (with-dom elem
        (.addEventListener elem "touchmove" #(.preventDefault %))
        (.css (js/jQuery "body") "overflow" "hidden")
        (reset! visible true)))))

(defn counter-tag [cid]
  (tag :class        "counter-tag"
       :leadingText  "已选"
       :trailingText (cell= (let [selected (check-selected-spec db__cart cid)]
                              (->> (map #(str (get % :spec/name)
                                              " ×"
                                              (get % :spec/quantity)) selected)
                                   (string/join ", ")) ))))

(defelem cuisine [{:keys [name depict species currency id] :or {currency "¥"} :as attr}]
  (let [price     (cell=  (string/join "/" (sort (map :spec/price species))))
        selected? (cell=  (seq (check-selected-spec db__cart id)))
        imgsrc    (cell=  (str "img/" (first depict)))
        attr      (dissoc attr  :name :depict :species :currency)]
    (article attr
      (equal-ratio-wrap
       :ratio "4_3"
       :class "item__header"
       (img
         :class "cuisine__picture"
         :src   imgsrc))
      (div :class "item__body clearfix"
        (h2    :class "cuisine__title"    :text name)
        (small :class "cuisine__currency" :text currency)
        (span  :class "cuisine__price"    :text price)
        (addition-button :class "cuisine__button" :cid id)
        (cell= (cond selected? (counter-tag id )))))))

(defelem v-Card
  "TODO:// Finally, and ideally, this page elements should have a
                   button which will give customer a vCard file after
                   itself is been clikced. Now, it just a card-style div"
  []
  (equal-ratio-wrap
   :ratio "golden"
   :class "card card--front"
   (ul
     (li :class "icon icon__phone"    :text (cell= (:restaurant/phone restaurant-meta)))
     (li :class "icon icon__location" :text (cell= (:restaurant/address restaurant-meta)))
     (li :class "icon icon__timer"    :text (cell= (:restaurant/rest-day restaurant-meta))))
   (img :src "img/motorbike.png")))

(defelem social-vCard
  ""
  []
  (equal-ratio-wrap
   :ratio "golden"
   :class "card card--back"
   (h1 :class "card__title icon icon__wechat" :text "关注微信")
   (figure
     (img        :class "card__img" :src "img/QR-1.jpg" :alt "喵姆餐厅微信服务号")
     (figcaption :class "clearfix"
       (h2 :text (cell= (:restaurant/name restaurant-meta)))
       (p  :text (cell= (str "id: " (:restaurant/wechatID restaurant-meta))))))

   (figure
     (img        :class "card__img" :src "img/QR-1.jpg" :alt "客服微信号")
     (figcaption :class "clearfix"
       (h2 :text "胖喵")
       (p  :text (cell= (str "id: " (:restaurant/phone restaurant-meta))))))))

;; Node-constructor functions ===============================================
(defn create-cuisine
  "Receive a cuisine id, generate a cuisine element"
  [cid]
  (let [c       (cell= (cuisine-details-of cid))
        c_title (cell= (:cuisine/name      c))
        c_img   (cell= (:cuisine/depict    c))
        c_spec  (cell= (:cuisine/species   c))  ]
    (cuisine :class   "item cuisine"
             :id      cid
             :name    c_title
             :depict  c_img
             :species c_spec )))

;; App skeleton =================================================================
(html
  (head
    (title :text site-title)
    (link
      :rel "shortcut icon"
      :href "img/motorbike.png")
    (link
      :rel "stylesheet"
      :href "stylesheets/main.css")
    (html-meta :charset "utf-8")
    (html-meta
      :http-equiv "Content-Type"
      :content "text/html; charset=utf-8")
    (html-meta
      :name "description"
      :content "美味披萨,焗饭,还有各种小吃,乌鲁木齐全城外送!")
    (html-meta
      :name "keywords"
      :content "喵姆餐厅 喵姆 Miaom 快餐 美味 乌鲁木齐快餐 披萨 焗饭 沙拉 烤翅")
    (html-meta
      :name "viewport"
      :content "initial-scale=1.0, width=device-width")
    (html-meta
     :name "msapplication-tap-highlight"
     :content "no"))
  (body
    (noscript
      (div :id "noscript"
        (p "JavaScript is required to view this page.")))
    (div :class "wrapper"
      (show-or-hide
       :state folding-toggle
       (slideshow
        :class "slideshow"
        :id    "slideshow"
        :ratio "golden"
        :imgs  (cell ["img/Chicken.JPG" "img/热辣牛肉.JPG" "img/Salad.jpg"])
        :default_img "img/logo.jpg"))
      (div
        :class "banner clearfix"
        (<!-- "This wrapper div may finally been removed to Sagittarius!")
        (billboard
         :class "notice-board" :greeting "欢迎预订" :interval 3000)
        (checkout-button
         :label "提交订单" :btn__img "img/notepad.png"))
      (navbar)
      (checkout-panel)
      (div :class "menus" :id "menus"
        (loop-tpl
         :bindings [menu menus]
         (section
           :id    menu
           :class "section-wrapper clearfix"
           (loop-tpl
            :bindings [category (cell= (categories-of menu))]
            (section
              :id    category
              :class "section cuisine-category"
              (header
                :class "section__header"
                (h1 :class "section__title" :text category))
              (div
                :class "section__body item-list clearfix"
                (cell-map create-cuisine
                          (cell= (cuisines-of category)))))))))
      (footer :class "footer"
        (social-vCard)
        (v-Card))
      (cell= (when-let [cid (peek adding-pool)]
               (addition-panel :cid cid ))))))
