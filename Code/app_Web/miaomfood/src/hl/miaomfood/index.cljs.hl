(page "index.html"
      (:require
       [datascript.core :as d :refer [q]]
       [javelin.core :refer [cell] :refer-macros [cell= destroy-cell!]]
       [miaomfood.rpc :as rpc]))

(add-initfn! (rpc/fetch-raw-db))

;; Cells ====================================================================
(defc db__cart (d/empty-db
                {:cuisine/id      {:db/unique :db.unique/identity}
                 :cuisine/species {:db/cardinality :db.cardinality/many
                                  :db/valueType :db.type/ref }}))

;; Cell formulas ============================================================
(let [schema {:website/notices   {:db/cardinality :db.cardinality/many
                                  :db/valueType :db.type/ref }
              :group/menus       {:db/cardinality :db.cardinality/many
                                  :db/valueType :db.type/ref }
              :menu/categories   {:db/cardinality :db.cardinality/many
                                  :db/valueType :db.type/ref }
              :category/cuisines {:db/cardinality :db.cardinality/many
                                  :db/valueType :db.type/ref }
              :cuisine/species   {:db/cardinality :db.cardinality/many
                                  :db/valueType :db.type/ref }}
      datoms  (cell= rpc/raw-db)
      db (cell= (d/db-with (d/empty-db schema) datoms))]

  (defc= site-title (d/q '[:find ?t . :where [_ :website/title ?t]] db))

  (defc= notices (d/q '[:find [?n ...]
                        :where
                        [_ :website/notices ?ns]
                        [?ns :notice/content ?n]]
                   db))

  (defc= restaurant-meta (d/q '[:find (pull ?e [:restaurant/name
                                                  :restaurant/phone
                                                  :restaurant/address
                                                  :restaurant/wechatID
                                                  :restaurant/rest-day
                                                  :restaurant/isClosed ]) .
                                  :where [?e :restaurant/name]]
                           db))

  (defc= menus (d/q '[:find ?mn
                      :where [ _   :group/menus ?gm ]
                             [ ?gm :menu/name  ?mn ] ]
                 db))

  (defc= categories-of
    (fn  [menu]
      (d/q '[:find ?cns
             :in $, ?mn
             :where
             [ ?e  :menu/name       ?mn ]
             [ ?e  :menu/categories ?mc ]
             [ ?mc :category/name   ?cn ] ]
        db, menu)))

  (defc= cuisines-of
    (fn [category]
     (d/q '[:find ?cid
            :in $, ?cn
            :where
            [ ?e  :category/name     ?cn  ]
            [ ?e  :category/cuisines ?cc  ]
            [ ?cc :cuisine/id        ?cid ] ]
       db, category)))

  (defc= cuisine-describe-of
    (fn [cuisine]
      (d/q '[:find
             (pull ?cs
                   [ :cuisine/name
                     :cuisine/depict
                     [:cuisine/species [:spec/name
                                        :spec/price
                                        :spec/inventory] ]])
             :in $, ?cid
             :where
             [ ?e :cuisine/id ?cid
               ?e :cuisine/species ?cs]]
        )))
  )


;; state query functions ====================================================
(defn check-selected-spec
  "Check the special cuisine's cart status"
  [cuisines-id db]
  (d/q '[:find ?sn ?sq
         :in $ ?cid
         :where [ ?e  :cuisine/id      ?cid ]
                [ ?e  :cuisine/species ?cs  ]
                [ ?cs :spec/name       ?sn  ]
                [ ?cs :spec/quantity   ?sq  ]]
       db, cuisines-id))


;; state transition functions ===============================================


;; Elements =================================================================
(defelem equal-ratio-wrap [{:keys [ratio] :or {:ratio "golden"} :as attr} body]
  (let [attr (dissoc attr :ratio)]
    ((div attr) {:class (str "wrp_ratio--" ratio)}
      (div :class "wrp--stretched"
        body))))

(defelem slideshow [{:keys [img_src]}]
  (equal-ratio-wrap
   :ratio "golden"
   :class "slideshow"
   (img
     :src img_src
     :class  "slideshow__img wrp--centering" )
   (div :class "slideshow__pagination"
     (b :class "slideshow__pagination-bullet")
     (b :class "slideshow__pagination-bullet")
     (b :class "slideshow__pagination-bullet"))))

(defelem addition-button [{:keys [serve] :as attr} _]
  (let [attr (dissoc attr :serve)]
    ((div :click #("TODO// popup order float panel")) attr)))

(defelem counter-tag [{:keys [cid] :as attr} _]
  (let [ attr (dissoc attr :cid)]
    (div attr
      (b :class "counter-tag__specs"
        :text "TODO//")
      (b :class "counter-tag__amount"
        :text "TODO//"))))

(defelem cuisine [{:keys [name imgsrc species currency id] :or {currency "¥"} :as attr}]
  (let [price     #(":TODO// construct prices string here")
        selected? (cell= (or true (seq (check-selected-spec id db__cart))))
        attr (dissoc attr  :name :imgsrc :species :currency)]
    (article attr
      (equal-ratio-wrap
       :ratio "4_3"
       :class "item__header"
       (img
         :class "cuisine__picture"
         :src imgsrc))
      (div :class "item__body clearfix"
        (h2
          :class "cuisine__title"
          :text name)
        (small :class "cuisine__currency"
          (span :class "cuisine__price"
            (text price)))
        (addition-button :class "cuisine__button"
                        :serve id)
        (cell= (cond
                 selected?
                 (counter-tag :class "counter-tag"
                             :cid id)))
        ))))




;; Interface =================================================================
(html
  (head
    (title :text site-title)
    (link
      :href "img/motorbike.png"
      :rel "shortcut icon")
   (link
      :href "stylesheets/main.css"
      :rel "stylesheet")
    (html-meta :charset "utf-8")
    (html-meta
      :content "text/html; charset=utf-8"
      :http-equiv "Content-Type")
    (html-meta
      :content "美味披萨,焗饭,还有各种小吃,乌鲁木齐全城外送!"
      :name "description")
    (html-meta
      :content "喵姆餐厅 喵姆 Miaom 快餐 美味 乌鲁木齐快餐 披萨 焗饭 沙拉 烤翅"
      :name "keywords")
    (html-meta
      :content "initial-scale=1.0, width=device-width"
      :name "viewport"))

  (body
    (noscript
      (div :id "noscript"
        (p "JavaScript is required to view this page.")))

    (div :class "wrapper"

      (slideshow
       :img_src "img/logo.jpg")

      (div :class "banner clearfix"
        (div :class "notice-board"
          (span :class "notice-board__notice"
            (cell= notices)))

        (a :class "btn-order"
          (span :class "btn-order__label"
            (text "提交订单"))
          (img :src "img/notepad.png")))

      (nav :class "nav")

      (div :class "checkout-page")

      (section
        :class "section-wrapper clearfix"
        :id "tasty"
        (section
          :class "section cuisine-category"
          :id "pizza-category"
          (header :class "section__header"
            (h1
              :class "section__title"
              :text "披萨"))
          (div
            :class "section__body item-list clearfix"
            (let [c_id "JQPG"
                  c_title "激情培根"
                  c_img "img/Bacon.JPG"
                  c_spec "nothing"]
              (cuisine :class  "item cuisine"
                       :id     (str c_id)
                       :name   c_title
                       :imgsrc    c_img
                       :species   c_spec)))

          (<!-- "注释测试")
          ))

      (footer :class "footer"
        (equal-ratio-wrap
         :ratio "golden"
         :class "card card--back"
         (h1
           :class "card__title icon icon__wechat"
           :text "关注微信")
         (figure
           (img
             :class "card__img"
             :src "img/QR-1.jpg"
             :alt "喵姆餐厅微信服务号")
           (figcaption :class "clearfix"
             (h2 (text "~{(:restaurant/name restaurant-meta)}"))
             (p  (text "id: ~{(:restaurant/wechatID restaurant-meta)}"))))

         (figure
           (img
             :class "card__img"
             :src "img/QR-1.jpg"
             :alt "客服微信号")
           (figcaption :class "clearfix"
             (h2 :text "胖喵")
             (p  :text "id:miaomu_food"))))

        (equal-ratio-wrap
         :ratio "golden"
         :class "card card--front"
         (ul
           (li
             :class "icon icon__phone"
             (text "~{(:restaurant/phone restaurant-meta)}"))
           (li
             :class "icon icon__location"
             (text "~{(:restaurant/address restaurant-meta)}"))
           (li
             :class "icon icon__timer"
             (text "~{(:restaurant/rest-day restaurant-meta)}")))
         (img :src "img/motorbike.png"))))))
