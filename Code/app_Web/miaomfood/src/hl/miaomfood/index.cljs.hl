(page "index.html"
      (:require
       [datascript.core :as d :refer [q]]
       [javelin.core :refer [cell] :refer-macros [cell= destroy-cell!]]
       [miaomfood.rpc :as rpc]))

(add-initfn! (rpc/fetch-raw-db))

;; Cells ====================================================================
(defc folding-toggle true)
(defc db__cart (d/empty-db
                {:cuisine/id      {:db/unique      :db.unique/identity }
                 :cuisine/species {:db/cardinality :db.cardinality/many
                                   :db/valueType   :db.type/ref }}))

;; Cell formulas ============================================================
(let [schema {:website/notices   {:db/cardinality :db.cardinality/many
                                  :db/valueType   :db.type/ref }
              :group/menus       {:db/cardinality :db.cardinality/many
                                  :db/valueType   :db.type/ref }
              :menu/categories   {:db/cardinality :db.cardinality/many
                                  :db/valueType   :db.type/ref }
              :category/cuisines {:db/cardinality :db.cardinality/many
                                  :db/valueType   :db.type/ref }
              :cuisine/id        {:db/unique      :db.unique/identity }
              :cuisine/species   {:db/cardinality :db.cardinality/many
                                  :db/isComponent true
                                  :db/valueType   :db.type/ref }}
      datoms  (cell= rpc/raw-db)
      db (cell= (d/db-with (d/empty-db schema) datoms))]

  (defc= site-title (d/q '[:find ?t . :where [_ :website/title ?t]] db))

  (defc= notices (d/q '[:find [?n ...]
                        :where
                        [_ :website/notices ?ns]
                        [?ns :notice/content ?n]]
                   db))

  (defc= restaurant-meta (d/q '[:find (pull ?e [:restaurant/name
                                                  :restaurant/phone
                                                  :restaurant/address
                                                  :restaurant/wechatID
                                                  :restaurant/rest-day
                                                  :restaurant/isClosed ]) .
                                  :where [?e :restaurant/name]]
                           db))

  (defc= menus (d/q '[:find [?mn ...]
                      :where [ _   :group/menus ?gm ]
                             [ ?gm :menu/name  ?mn ] ]
                 db))

  (defc= categories-of
    (fn  [menu]
      (d/q '[:find [?cn ...]
             :in $, ?mn
             :where
             [ ?e  :menu/name       ?mn ]
             [ ?e  :menu/categories ?mc ]
             [ ?mc :category/name   ?cn ] ]
        db, menu)))

  (defc= cuisines-of
    (fn [category]
      (d/q '[:find [?cid ...]
             :in $, ?cn
             :where
             [ ?e  :category/name     ?cn  ]
             [ ?e  :category/cuisines ?cc  ]
             [ ?cc :cuisine/id        ?cid ] ]
        db, category)))

  (defc= cuisine-details-of
    (fn [cuisine-id]
      (d/pull db ["*"] [:cuisine/id cuisine-id])))

  )


;; State query functions ====================================================
(defn check-selected-spec
  "Check the special cuisine's cart status"
  [ db cuisines-id ]
  (d/q '[:find ?sn ?sq
         :in $ ?cid
         :where [ ?e  :cuisine/id      ?cid ]
                [ ?e  :cuisine/species ?cs  ]
                [ ?cs :spec/name       ?sn  ]
                [ ?cs :spec/quantity   ?sq  ]]
       db, cuisines-id))


;; state transition functions ===============================================
(defn folding! [] #(swap! folding-toggle not))

;; Helper elements =================================================================
(defelem show-or-hide
  [{:keys [state]} children]
  (map (fn [child] (child :slide-toggle state)) children))

(defelem equal-ratio-wrap [{:keys [ratio] :or {:ratio "golden"} :as attr} body]
  (let [attr (dissoc attr :ratio)]
    ((div attr) {:class (str "wrp_ratio--" ratio)}
      (div :class "wrp--stretched"
        body))))

;; Component elements =================================================================
(defelem billboard [{:keys [greeting interval] :or {interval 3000} :as attr} ]
  (let [ note  (cell greeting)
         attr  (dissoc attr :interval :greeting) ]
    (with-let [elem (div attr (span :class "notice-board__notice" (cell= note )))]
      (with-init!
        (with-interval interval
          (when-let [hasValue (cell= (rand-nth notices))]
            (reset! note @hasValue)))))))

(defelem slideshow [{
                     :keys [ imgs interval default_img ]
                     :or   { interval 3000 default_img "img/logo.jpg" }
                     :as   attr
                     }]
  (let [ imgs   (cell= (->> (conj [] (not-empty imgs) default_img)
                          (flatten)
                          (distinct)
                          (filterv #(not= nil %))))
         n      (cell= (count imgs))
         attr   (dissoc attr :imgs :interval :default_img) ]
    (with-let [elem
               (equal-ratio-wrap
                attr
                (div (loop-tpl
                      :bindings [i imgs]
                      (img
                        :class "slideshow__img wrp--centering"
                        :src   i
                        :toggle true)))
                ((div (loop-tpl
                       :bindings [i (cell= (range n))]
                       ((b :class "slideshow__pagination-bullet" ))))
                 :class "slideshow__pagination" ))]
      (with-init!
        (with-interval interval
          ""
          )))))

(defelem navbar []
  (nav :class "nav"))

(defelem checkout-button [ {:keys [label btn__img] :or {label "提交订单"} :as attr} ]
  (a :class "btn-order"
    (span :class "btn-order__label"
      (text label))
    (img :src btn__img)))

(defelem checkout-panel []
  (div :class "checkout-page"))

(defelem addition-button [{:keys [serve] :as attr} _]
  (let [attr (dissoc attr :serve)]
    ((div :click #("TODO// popup order float panel")) attr)))

(defelem addition-panel
  "TODO// popup panel for add items to shopping cart"
  []
  )

(defelem counter-tag [{:keys [cid] :as attr} _]
  (let [ attr (dissoc attr :cid)]
    (div attr
      (b :class "counter-tag__specs"
        :text "TODO//")
      (b :class "counter-tag__amount"
        :text "TODO//"))))

(defelem cuisine [{:keys [name depict species currency id] :or {currency "¥"} :as attr}]
  (let [price     #(":TODO// construct prices string here")
        selected? (cell= (or true (seq (check-selected-spec id db__cart))))
        attr (dissoc attr  :name :imgsrc :species :currency)]
    (with-let
      [elem
       (article attr
         (equal-ratio-wrap
          :ratio "4_3"
          :class "item__header"
          (img
            :class "cuisine__picture"
            :src depict))
         (div :class "item__body clearfix"
           (h2
             :class "cuisine__title"
             :text name)
           (small :class "cuisine__currency"
             (span :class "cuisine__price"
               (text price)))
           (addition-button :class "cuisine__button"
                            :serve id)
           (cell= (cond
                    selected?
                    (counter-tag :class "counter-tag"
                                 :cid id)))))]
      (with-init!
        (let [a 0]
          "")))))


(defelem v-Card
  "TODO:// Finally, and ideally, this page elements should have a
                   button which will give customer a vCard file after
                   itself is been clikced. Now, it just a card-style div"
  []
  (equal-ratio-wrap
   :ratio "golden"
   :class "card card--front"
   (ul
     (li
       :class "icon icon__phone"
       (text "~{(:restaurant/phone restaurant-meta)}"))
     (li
       :class "icon icon__location"
       (text "~{(:restaurant/address restaurant-meta)}"))
     (li
       :class "icon icon__timer"
       (text "~{(:restaurant/rest-day restaurant-meta)}")))
   (img :src "img/motorbike.png")))

(defelem social-vCard
  ""
  []
  (equal-ratio-wrap
   :ratio "golden"
   :class "card card--back"
   (h1
     :class "card__title icon icon__wechat"
     :text "关注微信")
   (figure
     (img
       :class "card__img"
       :src "img/QR-1.jpg"
       :alt "喵姆餐厅微信服务号")
     (figcaption :class "clearfix"
       (h2 (text "~{(:restaurant/name restaurant-meta)}"))
       (p  (text "id: ~{(:restaurant/wechatID restaurant-meta)}"))))

   (figure
     (img
       :class "card__img"
       :src "img/QR-1.jpg"
       :alt "客服微信号")
     (figcaption :class "clearfix"
       (h2 :text "胖喵")
       (p  :text "id: 18690890381")))))

;; Node-constructor functions ===============================================
(defn create-cuisine
  "Receive a cuisine id, generate a cuisine element"
  [cid]
  (let [c       (cell= (cuisine-details-of cid))
        c_title (cell= (:cuisine/name      c))
        c_img   (cell= (:cuisine/depict    c))
        c_spec  (cell= (:cuisine/species   c))  ]
    (cuisine :class   "item cuisine"
             :id      cid
             :name    c_title
             :depict  c_img
             :species c_spec )))

;; App skeleton =================================================================
(html
  (head
    (title :text site-title)
    (link
      :href "img/motorbike.png"
      :rel "shortcut icon")
    (link
      :href "stylesheets/main.css"
      :rel "stylesheet")
    (html-meta :charset "utf-8")
    (html-meta
      :content "text/html; charset=utf-8"
      :http-equiv "Content-Type")
    (html-meta
      :content "美味披萨,焗饭,还有各种小吃,乌鲁木齐全城外送!"
      :name "description")
    (html-meta
      :content "喵姆餐厅 喵姆 Miaom 快餐 美味 乌鲁木齐快餐 披萨 焗饭 沙拉 烤翅"
      :name "keywords")
    (html-meta
      :content "initial-scale=1.0, width=device-width"
      :name "viewport"))
  (body
    (noscript
      (div :id "noscript"
        (p "JavaScript is required to view this page.")))
    (button :click (folding!) "收起")
    (div :class "wrapper"
      (show-or-hide
       :state folding-toggle
       (slideshow
        :class "slideshow"
        :ratio "golden"
        :imgs  (cell ["img/Chicken.JPG" "img/QR-1.jpg" "img/Salad.jpg"])
        :default_img "img/logo.jpg"))
      (div
        :class "banner clearfix"
        (<!-- "This wrapper div may finally been removed to Sagittarius!")
        (billboard
         :class "notice-board" :greeting "欢迎预订" :interval 3000)
        (checkout-button
         :label "提交订单" :btn__img "img/notepad.png"))
      (navbar)
      (checkout-panel)
      (section
        :class "section-wrapper clearfix"
        :id "tasty"
        (section
          :class "section cuisine-category"
          :id "pizza-category"
          (header
            :class "section__header"
            (h1
              :class "section__title"
              :text "披萨"))
          (div
            :class "section__body item-list clearfix"
            (let [category "披萨"]
              (cell-map create-cuisine
                        (cell= (cuisines-of category)))))))
      (footer :class "footer"
        (social-vCard)
        (v-Card)))))
