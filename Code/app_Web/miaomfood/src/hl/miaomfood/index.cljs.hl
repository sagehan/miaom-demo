(page "index.html"
      (:require
       [clojure.string  :as string]
       [datascript.core :as d :refer [q]]
       [datascript.transit :as dt]
       [cljsjs.hammer]
       [javelin.core :refer [cell] :refer-macros [cell= destroy-cell!]]
       [miaomfood.rpc :as rpc]))

(enable-console-print!)
(add-initfn! (rpc/fetch-raw-db))

;; Remote DB ============================================================
(def schema {:website/notices   {:db/valueType   :db.type/ref
                                 :db/cardinality :db.cardinality/many }
             :group/menus       {:db/valueType   :db.type/ref
                                 :db/cardinality :db.cardinality/many }
             :menu/categories   {:db/valueType   :db.type/ref
                                 :db/cardinality :db.cardinality/many }
             :category/cuisines {:db/valueType   :db.type/ref
                                 :db/cardinality :db.cardinality/many }
             :cuisine/id        {:db/unique      :db.unique/identity  }
             :cuisine/species   {:db/isComponent true
                                 :db/valueType   :db.type/ref
                                 :db/cardinality :db.cardinality/many } })
(def datoms  (cell= rpc/raw-db) )
(def db      (cell= (d/db-with (d/empty-db schema) datoms)))

;;===== query cells =======================
(defc= site-title (d/q '[:find ?t . :where [_ :website/title ?t]] db))

(defc= notices (d/q '[:find [?n ...]
                      :where
                      [ _ :website/notices ?ns ]
                      [ ?ns :notice/content ?n ] ] db))

(defc= slide-imgs ["img/Chicken.JPG" "img/热辣牛肉.JPG" "img/Salad.jpg"])

(defc= restaurant-meta
  (d/q '[:find (pull ?e
                     [:restaurant/name
                      :restaurant/phone
                      :restaurant/address
                      :restaurant/wechatID
                      :restaurant/rest-day
                      :restaurant/isClosed ]) .
         :where [?e :restaurant/name] ] db))

(defc= restaurant-tel     (:restaurant/phone restaurant-meta))
(defc= restaurant-address (:restaurant/address restaurant-meta))
(defc= restaurant-restday (:restaurant/rest-day restaurant-meta))

(defc= menus (d/q '[:find [?mn ...]
                    :where
                    [ _   :group/menus ?gm ]
                    [ ?gm :menu/name   ?mn ] ] db))

(defc= categories-of
  (fn  [menu]
    (d/q '[:find [?cn ...]
           :in $, ?mn
           :where
           [ ?e  :menu/name       ?mn ]
           [ ?e  :menu/categories ?mc ]
           [ ?mc :category/name   ?cn ] ] db, menu)))

(defc= cuisines-of
  (fn [category]
    (d/q '[:find [?cid ...]
           :in $, ?cn
           :where
           [ ?e  :category/name     ?cn  ]
           [ ?e  :category/cuisines ?cc  ]
           [ ?cc :cuisine/id        ?cid ] ] db, category)))

(defc= cuisine-detail-of
  (fn [cid] (d/pull db ["*"] [:cuisine/id cid])))

(defn spec-price-of  [cid spec]
  (->> (:cuisine/species (@cuisine-detail-of cid) )
       (filter #(= spec (:spec/name %)) )
       first
       :spec/price ))

;; Local DB ====================================================================
;; Entity with id=0 is used for storing the current editing order information!
(def  schema__cart {:cart/cuisineItems {:db/isComponent true
                                        :db/valueType   :db.type/ref
                                        :db/cardinality :db.cardinality/many } })
(def  conn__cart (d/create-conn schema__cart) )
(defc db__cart  (d/empty-db) )

;;===== fresh DB on every transaction!
(d/listen! conn__cart :freshDB #(reset! db__cart (:db-after %)))

;;===== persisting DB between page reloads!
(defonce storeage-name "miaomfood/DB")
;(defn persist [db]
;  (js/localStorage.setItem storeage-name (dt/write-transit-str db)))

;(d/listen! conn__cart :persistence
;           (fn [tx-report] (when-let [db (:db-after tx-report)]
;                             (js/setTimeout #(persist db) 0))))

;;===== restoring once persisted DB on page load
;;      Thanks Nikita Prokopov https://github.com/tonsky/
;(when-let [stored (js/localStorage.getItem storeage-name)]
;  (let [stored-db (dt/read-transit-str stored)]
;    (when (= (:schema stored-db) schema__cart)
;      (d/reset-conn! conn__cart stored-db)
;      (persist stored-db)
;      true)))

;;===== Query  ===========================
(defn sum-of-cart [db]
  (d/q '[:find (sum ?s) .
         :with ?e
         :where
         [?e :cuisineItem/price ?p ]
         [?e :cuisineItem/qty   ?q ]
         [(* ?p ?q)             ?s ] ] db))

(defc= order-total   (sum-of-cart db__cart      ) )
(defc= cart           (d/pull db__cart ["*"] 0   ) )
(defc= cart-items    (:cart/cuisineItems    cart) )
(defc= order-comment (:order/comment        cart) )
(defc= customer-name (:order/customerName   cart) )
(defc= customer-tel  (:order/customerPhone  cart) )
(defc= customer-addr (:order/streetAddress  cart) )

(defc= selected-species-of
  (fn [ cid ]    (filter #(= cid (:cuisineItem/ID %)) cart-items)))

(defc= cuisineItem-detail-of
  (fn [cid spec] (->> (selected-species-of cid) (filter #(= spec (:cuisineItem/spec %))) first)))

(defc= qty-of
  (fn [cid spec] (:cuisineItem/qty (cuisineItem-detail-of cid spec) )))

;;===== transaction! ======================
(defn inc-spec-tx [_ cid cname spec]
  (let [eid   (:db/id (@cuisineItem-detail-of cid spec) )
        qty   (or (:cuisineItem/qty (@cuisineItem-detail-of cid spec)) 0)
        price (spec-price-of cid spec) ]
    (if-not (nil? eid)
      [{:db/id eid :cuisineItem/qty (inc qty)} ]
      [{:db/id 0
        :cart/cuisineItems [{:db/id -1
                             :cuisineItem/ID    cid
                             :cuisineItem/name  cname
                             :cuisineItem/spec  spec
                             :cuisineItem/price price
                             :cuisineItem/qty   (inc qty) }] }])))

(defn dec-spec-tx [_ cid spec]
  (let [eid (:db/id (@cuisineItem-detail-of cid spec) )
        qty (or     (@qty-of cid spec) 0) ]
    (when-not (nil? eid)
      (cond (>  qty 1) [{:db/id eid :cuisineItem/qty (dec qty)} ]
            (== qty 1) [[:db.fn/retractEntity eid ] ] ))))

(defn form-input-tx [db k v]
  (if-not (d/pull db [k] 0)
    [[:db.fn/retractAttribute 0 k] [:db/add 0 k v]]
    [[:db/add 0 k v]] ))

(defn order-raw [db]
  (let [raw (d/pull db ["*"] 0)] raw))

(defn inc-cuisine! [cid spec]
  (let [cname (:cuisine/name (d/entity @db [:cuisine/id cid]))]
      (d/transact! conn__cart [[:db.fn/call inc-spec-tx cid cname spec]])) )

(defn dec-cuisine! [cid spec]
  (d/transact! conn__cart [[:db.fn/call dec-spec-tx cid spec]] ))

(defn add-comment! [comment]
  (d/transact! conn__cart [[:db.fn/call form-input-tx :order/comment comment]] ))

(defn add-username! [name]
  (d/transact! conn__cart [[:db.fn/call form-input-tx :order/customerName name]] ))

(defn add-phone! [phone]
  (d/transact! conn__cart [[:db.fn/call form-input-tx :order/customerPhone phone]] ))

(defn add-address! [address]
  (d/transact! conn__cart [[:db.fn/call form-input-tx :order/streetAddress address]]))

(defn submit-order! []
  (rpc/submit-order! (order-raw @db__cart  ))
  (d/reset-conn!     conn__cart (d/empty-db)) )

;; State cells =====================================================================
(defc fold-toggle true)
(defc pullup-toggle false)
(defc checkout-toggle false)
(defc schedule?  false)
(defc delay-days 0)
(defc delay-time nil)
(defc adding-pool nil)
(defc payment :cash)

;;===== state transition functions ==========
(def folding!     #(swap!  fold-toggle not))
(def pull-up!     #(do (folding!) (swap! pullup-toggle not)))
(def checkout!    #(swap!  checkout-toggle not))
(def schedule!    #(reset! schedule? true))
(def today!       #(reset! delay-days 0))
(def tomorrow!    #(reset! delay-days 1))
(def unSchedule!  #(reset! schedule? false))
(def ordering!    #(reset! adding-pool [%]))
(def unOrdering!  #(reset! adding-pool nil))

;; Auxiliary =======================================================================
(def indexed (partial map-indexed vector))

(def validate-presence? #(seq %))

(def validate-regexp #(fn [v] (re-matches % (or v ""))))

(def cycle-shift-vector-left!
  (fn [v] (swap! v #(into (into [] (rest %)) (vector (first %))))))

(def cycle-shift-vector-right!
  (fn [v] (swap! v #(into (vector (peek %)) (pop %)))))

(defn comp-item [m] (str (:cuisineItem/name m) "(" (name (:cuisineItem/spec m)) ")"))

(defn item-subtotal [m] (* (:cuisineItem/price m) (:cuisineItem/qty m)))

(defn comp-validator [cell validator]
  {:valid? (if (validator cell) true false), :value cell })

;;===== Form validators =============
(def form-name-valid?  (validate-regexp #"^[a-zA-Z\u4e00-\u9fa5]{2,8}$") )
(def form-phone-valid? (validate-regexp #"^1[3|5|7|8|][0-9]{9}$") )

(defc= is-phone-valid?    (comp-validator customer-tel form-phone-valid?))
(defc= is-username-valid? (comp-validator customer-name form-name-valid?))
(defc= is-address-valid?  (comp-validator customer-addr validate-presence?))
(defc= disabled? (not (and (:valid? is-phone-valid?)
                            (:valid? is-username-valid?)
                            (:valid? is-address-valid?) )))

;; Helper elements =================================================================
(defelem show-or-hide [{:keys [state]} kids]
  (map (fn [child] (child :slide-toggle state)) kids))

(defelem equal-ratio-wrap [{:keys [ratio] :or {:ratio "golden"} :as attrs} body]
  (let [attr (dissoc attrs :ratio)]
    ((div attrs) {:class (str "wrp_ratio--" ratio)}
      (div :class "wrp--stretched" body) )))

(defelem tag [{:keys [leadingText trailingText] :as attrs} _]
  (let [ attrs (dissoc attrs :leadingText :trailingText) ]
    ((span :class "tag"
       (b :class "tag__leading"  :text leadingText )
       (b :class "tag__trailing" :text trailingText) ) attrs)))

(defelem input-wrap [{:keys [valid?] :as attrs} kids]
  (let [dirty? #(not (nil? %))
        attrs   (dissoc attrs :valid?) ]
    ((div attrs kids)
     :class (cell= {:form-cell true
                    :is-invalid (and (dirty? (:value valid?)) (not (:valid? valid?)))}) )))

(defelem header-table [{:keys [name col-names click-fn] :as attrss}]
  (div :class "header-table"
    (table :class "cuisine-header-tbl"
      (thead (tr (map #(th :scope "col" :text %) col-names))))))

(defelem content-table [{:keys [row-items] :as attrs}]
  (div :class "content-table"
    (table :class "cuisine-body-tbl"
      (tbody
        (loop-tpl
         :bindings [item row-items ]
         (let [cid (cell= (:cuisineItem/ID item))
               row (cell= ((juxt comp-item :cuisineItem/price :cuisineItem/qty item-subtotal) item)) ]
           (tr (cell-map #(td :text %) row) :click #(ordering! @cid)) )))
      (let [coupon (cell= nil)]
        (tfoot
          (tr
            (td :colspan 3 (label :text "优惠码" (input :class "coupon-input")))
            (td :text coupon))
          (tr
            (td :text "合计" :colspan 3)
            (td :text order-total) ))))))

;; Component elements =================================================================
(defelem billboard [{:keys [greeting interval] :or {interval 3000} :as attrs} ]
  (let [ note   (cell greeting)
         attrs  (dissoc attrs :interval :greeting) ]
    (with-let [elem (div attrs (span :class "notice-board__notice" note ))]
      (with-init!
        (with-interval interval
          (when-let [hasValue (cell= (rand-nth notices))]
            (reset! note @hasValue)))))))

(defelem slideshow [{
                     :keys [ imgs interval default_img ]
                     :or   { interval 3000 default_img "img/logo.jpg" }
                     :as   attrs }]
  (let [ imgs   (cell= (->> (conj [] default_img (not-empty imgs))
                          (flatten)
                          (distinct)
                          (filterv #(not= nil %))))
         toggle (cell   [ [true] [false] [false] [false] ])
         attrs  (dissoc attrs :imgs :interval :default_img) ]
    (with-let [elem
               (equal-ratio-wrap attrs
                (div (loop-tpl
                      :bindings [ [[t] im] (cell= (map vector toggle imgs)) ]
                      (img
                        :class  "slideshow__img wrp--centering"
                        :src    im
                        :toggle t)))
                (div :class "slideshow__pagination"
                  (loop-tpl
                   :bindings [[t] toggle]
                   (span
                     :class (cell= {:pagination__bullet true
                                    :pagination__bullet--active t})))))]
      (with-init!
        (with-interval interval
          (swap! toggle #(into (vector (last %)) (butlast %)))))
      (with-dom elem
        (let [ hm-slide (js/Hammer. (.getElementById js/document "slideshow")) ]
          (.on hm-slide "swipeleft"  #(cycle-shift-vector-left! toggle))
          (.on hm-slide "swiperight" #(cycle-shift-vector-right! toggle)))))))

(defelem navbar []
  (let [[tasty drink] ["好吃的" "好喝的"]
        ts (cell= (categories-of tasty))
        ds (cell= (categories-of drink))
        my-li  #(->> (li %) (a {:href (str "#" %)}) ) ]
    (nav :class (cell= {:nav true :is-pullup pullup-toggle})
      (div :class "nav__hd"
        (div :class "nav__menu" :text "菜单" :click #'pull-up!)
        (ul
          (a :href "#好吃的"
           (li :class "nav__tasty" :data-cate "tasty" :href #(str "#" tasty) :text tasty))
          (a :href "#好喝的"
           (li :class "nav__drink" :data-cate "drink" :href #(str "#" drink) :text drink)) ))
      (div :class "nav__bd"
        (ul :class "tasty-list" (cell= (map my-li ts)) )
        (ul :class "drink-list" (cell= (map my-li ds)) ) ))))

(defelem checkout-button [ {:keys [label btn__img] :or {label "订单中心"} :as attrs} ]
  (a :class "checkout-button"
     :click #(checkout!)
    (span :class "checkout-button__label" :text label)
    (img  :src btn__img)))

(defelem order-page []
  (div :class "order-page"
    (div :class "order__cuisines icon icon__cuisines"
      (header-table  :col-names ["菜品" "单价" "数量" "小计"])
      (cell= (when-not (empty? cart-items) (content-table :row-items cart-items))))
    (input-wrap :class "order__comment icon icon__comment"
      (input :placeholder "备注" :value  order-comment :change #(add-comment! @%)))
    (div :class "order__schedule icon icon__schedule"
      (button :class (cell= {:btn__radio true, :is-selected (not schedule?)}) :click #(unSchedule!) "立即送餐")
      (button :class (cell= {:btn__radio true, :is-selected schedule? })      :click #(schedule!)   "预订"))
    (div :class "schedule-picker" :toggle (cell= schedule?)
      (button :class (cell= {:btn__radio true, :is-selected (== 0 delay-days)}) :click #(today!)    "今天")
      (button :class (cell= {:btn__radio true, :is-selected (== 1 delay-days)}) :click #(tomorrow!) "明天")
      (input :class "schedule-time" :value nil :change #() :type "time"))
    (input-wrap :class "customer__name icon icon__user" :valid? is-username-valid?
      (input :value  customer-name :change #(add-username! @%) :placeholder "姓名/称呼" ))
    (input-wrap :class "customer__phone icon icon__phone" :valid? is-phone-valid?
      (input :value customer-tel :change #(add-phone! @%) :type "tel" :placeholder "手机"))
    (input-wrap :class "order__address icon icon__address"
      (textarea :value customer-addr :change #(add-address! @%) :placeholder "地址" ) )
    (div :class "order__payment icon icon__payment"
      (button :class (cell= {:btn__radio true, :is-selected (= payment :cash  )}) :click #(reset! payment :cash)   "到付")
      (button :class (cell= {:btn__radio true, :is-selected (= payment :wechat)}) :click #(reset! payment :wechat) "微信支付")
      (button :class (cell= {:btn__radio true, :is-selected (= payment :alipay)}) :click #(reset! payment :alipay) "支付宝"))
    (button :class (cell= {:btn__submit true, :btn__submit--disabled disabled? }) :disabled disabled? :click #'submit-order!
      "确认订单") ))

(defelem user-page []
  (div :class "user-page"))

(defelem control-tabs []
  (div :class "control-tabs"
    ))

(defelem controller-bar []
  (div :class (cell= {:controller-bar true, :clearfix true,
                      :controller-bar--stickyOrderTop checkout-toggle } )
    (cell=  (if-not checkout-toggle
              (billboard
               :class "notice-board" :greeting "欢迎预订" :interval 3000)
              (control-tabs)))
    (checkout-button :label "订单中心" :btn__img "img/notepad.png")))

(defelem checkout-panel []
  (let [isCartEmpty? (cell= (empty? cart-items))
        hasLogin?    (cell  false)
        isOrderPage? (cell  true)
        isUserPage?  (cell= (not isOrderPage?) )
        visible?     (cell false) ]
    (with-let [elem
               (div :class (cell= {:checkout-panel true, :is-visible visible?} )
                 (controller-bar)
                 (cell= (cond
                          isOrderPage?
                          (if isCartEmpty?
                            (div :class "empty-reminder"  :text "您还没有添加任何菜品哦！")
                            (order-page) )
                          isUserPage?
                          (if-not hasLogin?
                            (div :class "not-login-reminder" :text "欢迎注册会员，立享优惠!")
                            (user-page) ))))]
      (with-init!
        (with-interval 1000
          (if-not (instance? js/Element (.get (js/jQuery ".checkout-panel") 0))
            (.css (js/jQuery "body") "overflow" "visible"))))
      (with-dom elem
        (.css (js/jQuery "body") "overflow" "hidden")
        (reset! visible? true)) )))

(defelem addition-button [{:keys [cid] :as attrs} _]
  (let [attr (dissoc attrs :cid)]
    (div attrs :click #(ordering! cid))))

(defelem addition-panel [{:keys [cid] :as attrs} _]
  (let [c         (cell= (cuisine-detail-of cid))
        cname     (cell= (:cuisine/name    c))
        species   (cell= (:cuisine/species c))
        s_names   (cell= (map :spec/name species))
        visible?  (cell false) ]
    (with-let
      [elem
       (div :class (cell= {:modal true, :is-visible visible?} )
         (equal-ratio-wrap
          :ratio "golden"
          :class (cell=  {:addition-panel true, :is-visible visible?} )
          (div :class "addition-panel__title-wrap"
            (h2  :class "addition-panel__title" cname))
          (div :class "addition-panel__row-wrap"
            (loop-tpl
             :bindings [spec s_names]
             (let [quantity (cell= (or (qty-of cid spec) 0))
                   added?   (cell= (>  quantity 0)) ]
               (div
                 :class   "addition-panel__row"
                 (tag
                  :class        (cell= {:addition-tag true, :tag--isEmpty (not added?)})
                  :leadingText  (cell= (name spec))
                  :trailingText (cell= (if-not (zero? quantity) (str "×" quantity) "")))
                 (div
                   :class "addition-panel__btn-add"
                   :click #(inc-cuisine! cid @spec))
                 (div
                   :class "addition-panel__btn-retract"
                   :click #(dec-cuisine! cid @spec)
                   :css   (cell= {:visibility (when-not added? "hidden")})) )))))
         (div
           :class (cell= {:miao-button true, :is-visible visible?})
           :click #(do (reset! visible? false)
                       (with-timeout 150 (unOrdering!)))))]
      (with-init!
        (with-interval 1000
          (if-not (instance? js/Element (.get (js/jQuery ".modal") 0))
            (.css (js/jQuery "body") "overflow" "visible"))))
      (with-dom elem
        (.addEventListener elem "touchmove" #(.preventDefault %))
        (.css (js/jQuery "body") "overflow" "hidden")
        (reset! visible? true)))))

(defn counter-tag [cid]
  (tag :class        "counter-tag"
       :leadingText  "已选"
       :trailingText (cell= (->> (selected-species-of cid)
                                 (map #(str ((comp name :cuisineItem/spec) %)
                                      " ×"
                                      (:cuisineItem/qty %)))
                                 (string/join ", ")) )))

(defelem cuisine [{:keys [name depict species currency id] :or {currency "¥"} :as attrs}]
  (let [price     (cell=  (string/join "/" (sort (map :spec/price species))))
        selected? (cell=  (seq (selected-species-of id)))
        imgsrc    (cell=  (str "img/" (first depict)))
        attrs      (dissoc attrs  :name :depict :species :currency)]
    (article attrs
      (equal-ratio-wrap {:class "item__header", :ratio "4_3"}
         (img :class "cuisine__picture",  :src imgsrc))
      (div :class "item__body clearfix"
        (h2    :class "cuisine__title"    :text name)
        (small :class "cuisine__currency" :text currency)
        (span  :class "cuisine__price"    :text price)
        (addition-button :class "cuisine__button" :cid id)
        (cell= (when selected? (counter-tag id )))))))

(defelem business-card
  "TODO:// Finally, and ideally, this page elements should have a
                   button which will give customer a vCard file after
                   itself is been clikced. Now, it just a card-style div"
  []
  (equal-ratio-wrap {:class "card card--front", :ratio "golden"}
   (ul
     (li :class "card__phone     icon icon__phone"    :text restaurant-tel)
     (li :class "card__location  icon icon__location" :text restaurant-address)
     (li :class "card__rest-day  icon icon__rest-day" :text restaurant-restday))
   (img :src "img/motorbike.png")))

(defelem social-card []
  (equal-ratio-wrap {:class "card card--back", :ratio "golden"}
     (h1 :class "card__title icon icon__wechat"  :text  "关注微信")
   (figure
     (img        :class "card__img" :src "img/QR-1.jpg" :alt "喵姆餐厅微信服务号")
     (figcaption :class "clearfix"
       (h2 :text (cell= (:restaurant/name restaurant-meta)))
       (p  :text (cell= (str "id: " (:restaurant/wechatID restaurant-meta))))))
   (figure
     (img        :class "card__img" :src "img/QR-1.jpg" :alt "客服微信号")
     (figcaption :class "clearfix"
       (h2 :text "胖喵")
       (p  :text (cell= (str "id: " (:restaurant/phone restaurant-meta))))))))

;; Node-constructor functions ===============================================
(defn create-cuisine
  "Receive a cuisine id, generate a cuisine element"
  [cid]
  (let [c    (cell= (cuisine-detail-of cid) )
        name (cell= (:cuisine/name        c) )
        img  (cell= (:cuisine/depict      c) )
        spec (cell= (:cuisine/species     c) ) ]
    (cuisine :class "item cuisine" :id cid, :name name, :depict img, :species spec )))

;; App skeleton =================================================================
(html
  (head
    (title :text site-title)
    (link  :rel "shortcut icon" :href "img/motorbike.png")
    (link  :rel "stylesheet"    :href "stylesheets/main.css")
    (html-meta :charset "utf-8")
    (html-meta :name "description" :content "美味披萨,焗饭,还有各种小吃,乌鲁木齐全城外送!")
    (html-meta :name "keywords"    :content "喵姆餐厅 喵姆 Miaom 快餐 美味 乌鲁木齐快餐 披萨 焗饭 沙拉 烤翅")
    (html-meta :name "viewport"    :content "initial-scale=1.0, width=device-width, maximum-scale=1, user-scalable=0")
    (html-meta :name "msapplication-tap-highlight" :content "no")
    (html-meta :http-equiv "Content-Type" :content "text/html; charset=utf-8"))
  (body
    (noscript (div :id "noscript" (p "JavaScript is required to view this page.")))
    (div :class "wrapper"
      (show-or-hide
       :state fold-toggle
       (slideshow
        :class "slideshow"
        :id    "slideshow"
        :ratio "golden"
        :imgs  slide-imgs
        :default_img "img/logo.jpg"))
      (cell= (when-not checkout-toggle
               (controller-bar
                :class (cell=  {:controller-bar true
                                :controller-bar--stickyMenuTop ";TODO: "}))))
      (navbar)
      (div :class "menus" :id "menus"
        (loop-tpl
         :bindings [menu menus]
         (section
           :id    menu
           :class "section-wrapper clearfix"
           (loop-tpl
            :bindings [category (cell= (categories-of menu))]
            (section
              :id    category
              :class "section cuisine-category"
              (header
                :class "section__header"
                (h1 :class "section__title" :text category))
              (div
                :class "section__body item-list clearfix"
                (cell-map create-cuisine (cell= (cuisines-of category))) ))))))
      (footer :class "footer"
        (social-card)
        (business-card) )
      (cell=  (when checkout-toggle
                (checkout-panel) ))
      (cell=  (when-let [cid (peek adding-pool)]
                (addition-panel :cid cid) )))))
